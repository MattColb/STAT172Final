str(cps_data)
str(cps_data_f)
##TASKS
#try regressions both with and without some meaningful interaction
#terms to look at the ways your X's could affect each other and the outcome
cps_data <- cps_data %>% mutate(
donut = as.factor(donut)
)
<<<<<<< HEAD
summary(cps_data$FSFOODS) #FSFOODS has 1755 NA's
cps_data_f <- cps_data[!is.na(cps_data$FSFOODS),]
summary(cps_data_f$FSFOODS) #new subset without NAs has 6665 obs, compared to 8420 originally
str(cps_data_f)
fsfoods_predictions <- predict(fsfoods_lasso_f1, acs_test_data, type="response")[,1]
summary(acs_reduced_test)
#clean FSFOODS analysis file
=======
###########################################
x_train <- model.matrix(FSWROUTY_bin ~ hhsize + married + education + elderly + kids
+ black + hispanic + female + faminc_cleaned
, data=train.df)[,-1]
x_test <- model.matrix(FSWROUTY_bin ~ hhsize + married + education + elderly + kids
+ black + hispanic + female + faminc_cleaned
, data=test.df)[,-1]
# y_train <- as.numeric(train.df$FSWROUTY_bin) - 1  # Convert factor (1, 2) to binary (0, 1)
y_test <- as.vector(test.df$FSWROUTY_bin)
y_train <- as.vector(train.df$FSWROUTY_bin)
########### LASSO ##################
fswrouty_lasso <- cv.glmnet(x_train, y_train, family=binomial(link="logit"), alpha = 1)
plot(fswrouty_lasso)
best_lambda_lasso <- fswrouty_lasso$lambda.min
coef(fswrouty_lasso, s="lambda.min") %>% as.matrix()
# cluster 2, 4, and 5 went to 0
lasso_model <- glmnet(x_train, y_train, family=binomial(link="logit"),
alpha = 1,
lambda = best_lambda_lasso,
weights = as.vector(train.df$weight)
)
# predict probability on the test set
test_preds <- test.df %>%
mutate (
lasso_prob = predict(lasso_model, x_test, type = "response"))
lasso_rocCurve <- roc(response = as.factor(test_preds$FSWROUTY_bin),
predictor = test_preds$lasso_prob,
levels = c("0", "1"))
plot(lasso_rocCurve, print.thres=TRUE, print.auc=TRUE)
########### RIDGE ##############
fswrouty_ridge <- cv.glmnet(x_train, y_train, family=binomial(link="logit"), alpha = 0)
plot(fswrouty_ridge)
best_lambda_ridge <- fswrouty_ridge$lambda.min
coef(fswrouty_ridge, s="lambda.min") %>% as.matrix()
ridge_model <- glmnet(x_train, y_train, family=binomial(link="logit"),
alpha = 0,
lambda = best_lambda_lasso,
weights = as.vector(train.df$weight))
# predict probability on the test set
test_preds <- test.df %>%
mutate (
ridge_prob = predict(ridge_model, x_test, type = "response"))
ridge_rocCurve <- roc(response = as.factor(test_preds$FSWROUTY_bin),
predictor = test_preds$ridge_prob,
levels = c("0", "1"))
plot(ridge_rocCurve, print.thres=TRUE, print.auc=TRUE)
#make data frame of Firths ROC info
firths_data_fswrouty <- data.frame(
Model = "Firths",
Specificity = firths_fswrouty_rocCurve$specificities,
Sensitivity = firths_fswrouty_rocCurve$sensitivities,
AUC = as.numeric(firths_fswrouty_rocCurve$auc)
)
#make data frame of lasso ROC info
lasso_data_fswrouty <- data.frame(
Model = "Lasso",
Specificity = lasso_rocCurve$specificities,
Sensitivity = lasso_rocCurve$sensitivities,
AUC = lasso_rocCurve$auc %>% as.numeric
)
#make data frame of ridge ROC info
ridge_data_fswrouty <- data.frame(
Model = "Ridge",
Specificity = ridge_rocCurve$specificities,
Sensitivity = ridge_rocCurve$sensitivities,
AUC = ridge_rocCurve$auc%>% as.numeric
)
# make data frame of ctree ROC info
ctree_fswrouty <- data.frame(
Model = "Categorical Tree",
Specificity = ctree_rocCurve$specificities,
Sensitivity = ctree_rocCurve$sensitivities,
AUC = ctree_rocCurve$auc %>% as.numeric
)
rf_fswrouty <- data.frame(
Model = "Random Forest",
Specificity = rf_rocCurve$specificities,
Sensitivity = rf_rocCurve$sensitivities,
AUC = rf_rocCurve$auc %>% as.numeric
)
# Combine all the data frames
roc_data <- rbind(firths_data_fswrouty, lasso_data_fswrouty,
ridge_data_fswrouty, rf_fswrouty, ctree_fswrouty)
# Plot the data
ggplot() +
geom_line(aes(x = 1 - Specificity, y = Sensitivity, color = Model),data = roc_data) +
geom_text(data = roc_data %>% group_by(Model) %>% slice(1),
aes(x = 0.75, y = c(0.75, 0.65, 0.55, 0.45, 0.35), colour = Model,
label = paste0(Model, " AUC = ", round(AUC, 5)))) +
scale_colour_brewer(palette = "Paired") +
labs(x = "1 - Specificity", y = "Sensitivity", color = "Model") +
theme_minimal()
source("./code/clean_acs.R")
acs_data <- model.matrix(~., data=acs_data)[,-1]
## MAKE PREDICTIONS ON ACS DATA ##
fswrouty_predictions <- predict(lasso_model, acs_data, type="response")[,1]
# Align acs_data with the training data structure
acs_data_aligned <- model.matrix(~ ., data = acs_data)[, colnames(x_train)]
acs_data_aligned <- model.matrix(~ ., data = acs_data)[, colnames(train.df)]
acs_data <- model.matrix(~., data=acs_data)[,-1]
source("./code/clean_acs.R")
left_join(summary_by_PUMA, by = "PUMA")
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
table(test.df.preds$lasso_fsstmp_preds)
mean(test.df.preds$lasso_fsstmp_preds)
mean(ifelse(test.df.preds$lasso_fsstmp_preds > lasso_fsstmp_pi_star), 1, 0)
mean(ifelse(test.df.preds$lasso_fsstmp_preds > lasso_fsstmp_pi_star, 1, 0))
mean(train.df$FSSTMPVALC_bin)
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
acs_reduced_test = acs_data %>%
select(x_vars) %>%
#mutate(
#  donut = as.factor(donut)
#)
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
acs_reduced_test = acs_data %>%
select(x_vars)
acs_test_data <- model.matrix(~., data=acs_reduced_test)[,-1]
fswrouty_predictions <- predict(lasso_model, acs_test_data, type="response")[,1]
# Check the first few predictions
head(fswrouty_predictions)
acs_predicted <- acs_data %>% mutate(
fswrouty_probs = fswrouty_predictions
)
acs_predicted_only_seniors <- acs_predicted[acs_predicted$elderly > 0,]
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fswrouty_probs, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
#https://www.geoplatform.gov/metadata/258db7ce-2581-4488-bb5e-e387b6119c7a
sf_data <- st_read("./data/tl_2023_19_puma20/tl_2023_19_puma20.shp")
colnames(sf_data)[colnames(sf_data) == "GEOID20"] = "PUMA"
map_data <- sf_data %>%
left_join(summary_by_PUMA, by = "PUMA")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households",
fill = "Proportion on\nFood Anxiety")
#Load in Senior Data
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
ggplot(data = senior_data) +
geom_sf(aes(fill = senior_population)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of Seniors by PUMA",
fill = "Population of\nSeniors")
#Predicted number of seniors on SNAP
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
>>>>>>> e33efbaa2a939f1bbc91bb73d372f5900853039b
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
library(dplyr)
library(rpart)
library(rpart.plot)
library(ggplot2)
source("./code/clean_cps.R")
source("./code/clean_acs.R")
#Cleaning and Exploring
summary(cps_data)
str(cps_data)
head(cps_data)
#FSFOODS indicates whether the household had enough to eat or enough of the kinds of foods they wanted to eat in the past twelve months.
#FSFOODS is 1 if Not Enough, 0 if Enough
##TASKS
#try regressions both with and without some meaningful interaction
#terms to look at the ways your X's could affect each other and the outcome
cps_data <- cps_data %>% mutate(
donut = as.factor(donut)
)
summary(cps_data$FSFOODS) #FSFOODS has 1755 NA's
cps_data_f <- cps_data[!is.na(cps_data$FSFOODS),]
summary(cps_data_f$FSFOODS) #new subset without NAs has 6665 obs, compared to 8420 originally
str(cps_data_f)
#Split the data into train/test df forms to use in lasso/ridge later
RNGkind(sample.kind = "default")
set.seed(26473)
train.idx <- sample(x = 1:nrow(cps_data_f), size = .7*nrow(cps_data_f))
train.df <- cps_data_f[train.idx,]
test.df <- cps_data_f[-train.idx,]
x_vars = c("hhsize", "female", "hispanic", "black", "faminc_cleaned",
"kids", "elderly", "education", "married", "donut")
y_var = c("FSFOODS")
## Make all necessary matrices and vectors
fsfoods.x.train <- model.matrix(FSFOODS~hhsize + married + education + elderly +
kids + black + hispanic + female+ faminc_cleaned + donut,
data = train.df)[,-1]
fsfoods.x.test <- model.matrix(FSFOODS~hhsize + married + education + elderly +
kids + black + hispanic + female+ faminc_cleaned + donut,
data = test.df)[,-1]
fsfoods.y.train <- train.df$FSFOODS %>% as.vector()
fsfoods.y.test <- test.df$FSFOODS %>% as.vector()
train.weights <- as.vector(train.df$weight)
test.weights <- as.vector(test.df$weight) #not strictly necessary, for ease of reference
#----MLE Logistic Regression----
lr_mle_fsfoods <- glm(FSFOODS ~ hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned + donut,
data=train.df,
family=binomial(link="logit"),
weights=weight
)
# Get warnings - algorithm did not converge, complete separation occurred
summary(lr_mle_fsfoods) #grossly high standard error on all vars, confirms complete separation
#look at the coefficients from the MLE logistic regression
lr_mle_fsfoods_beta <- lr_mle_fsfoods %>% coef()
#---Firth's Penalized Likelihood----
lr_fmle_fsfoods <- logistf(FSFOODS ~ hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned + donut,
data=train.df,
weights=train.weights)
summary(lr_fmle_fsfoods)
#look at the coefficients from the MLE logistic regression
lr_fmle_fsfoods_beta <- lr_fmle_fsfoods %>% coef()
#----Lasso and Ridge with Basic X vars----
#Use cross validation to get tuning info for final regression
fsfoods_lasso_cv <- cv.glmnet(fsfoods.x.train, #MATRIX without our Y COLUMN
fsfoods.y.train, #VECTOR - our Y COLUMN
family = binomial(link = "logit"),
alpha = 1,
weights = train.weights #1 for lasso, 0 for ridge
)
fsfoods_ridge_cv <- cv.glmnet(fsfoods.x.train, #MATRIX without our Y COLUMN
fsfoods.y.train, #VECTOR - our Y COLUMN
family = binomial(link = "logit"),
alpha = 0,
weights = train.weights#1 for lasso, 0 for ridge
)
#Find and extract minimizing lambda values
plot(fsfoods_lasso_cv)
plot(fsfoods_ridge_cv)
best_lasso_lambda <- fsfoods_lasso_cv$lambda.min
best_ridge_lambda <- fsfoods_ridge_cv$lambda.min
#fit final lasso + ridge models
fsfoods_lasso_f1 <- glmnet(fsfoods.x.train, fsfoods.y.train,
family = binomial(link = "logit"), alpha = 1,
lambda = best_lasso_lambda) #this lambda is what actually tunes the model
fsfoods_ridge_f1 <- glmnet(fsfoods.x.train, fsfoods.y.train,
family = binomial(link = "logit"), alpha = 0,
lambda = best_ridge_lambda) #this lambda is what actually tunes the model
#----Random Forest----
rf_train <- train.df %>% select(-c("FSFOODS")) %>%
mutate(
FSFOODS_fact = as.factor(train.df$FSFOODS)
)
rf_test <- test.df %>% select(-c("FSFOODS")) %>%
mutate(
FSFOODS_fact = as.factor(test.df$FSFOODS)
)
rf_init_fsfoods <- randomForest(FSFOODS_fact ~ hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned + donut,
data=rf_train,
mtry=floor(sqrt(length(x_vars))),
ntree=1000,
importance=TRUE)
#Multiple mtry
mtry = c(1:length(x_vars))
keeps <- data.frame(m=rep(NA, length(mtry)),
OOB_err_rate = rep(NA, length(mtry)))
for (idx in 1:length(mtry)){
print(paste0("Trying m = ", mtry[idx]))
tempforest <- randomForest(FSFOODS_fact ~hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned + donut,
data=rf_train,
ntree=1000,
mtry=mtry[idx])
keeps[idx, "m"] <- mtry[idx]
keeps[idx, "OOB_err_rate"] <- mean(predict(tempforest) != rf_train$FSFOODS_fact) #Estimates out of sample error
}
best_m <- keeps[order(keeps$OOB_err_rate),"m"][1]
<<<<<<< HEAD
final_forest <- randomForest(FSFOODS_fact ~ hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned + donut,
data=rf_train,
mtry=best_m,
ntree=1000,
importance=TRUE)
#plot(rf_rocCurve, print.thres=TRUE, print.auc=TRUE)
#rf_pi_star <- coords(rf_rocCurve, "best", ret="threshold")$threshold[1]
#pi star is 0.0055 idk what that means but im saving it just in case ig
#making a variable importance plot based on decrease in forest accuracy
varImpPlot(final_forest, type=1)
rf_vi <- as.data.frame(varImpPlot(final_forest, type=1))
=======
ggplot(keeps, aes(x = m, y = OOB_err_rate)) +
geom_line() +
geom_point() +
labs(title = "OOB Error Rate vs mtry",
x = "mtry",
y = "OOB Error Rate") +
theme_minimal()
# final RF model
rf_fswrouty <- randomForest(as.factor(FSWROUTY_bin) ~ .,
data = train.df,
ntree = 1000,
mtry = best_m,
importance = TRUE)
# Validate model as predictive tool
pi_hat <- predict(rf_fswrouty, test.df, type = "prob")[, "1"] #Choose positive event column
rf_rocCurve <- roc(response = test.df$FSWROUTY_bin,
predictor = pi_hat,
levels = c("0", "1"))
plot(rf_rocCurve, print.thres = TRUE, print.ouc = TRUE)
auc(rf_rocCurve)
pi_star <- coords(rf_rocCurve, "best", ret="threshold")$threshold[1]
test_preds <- test.df %>% mutate(
rf_preds = as.factor(ifelse(pi_hat > pi_star, "Yes", "No"))
source("./code/clean_cps.R")
source("./code/clean_acs.R")
acs_data <-acs_data %>%  mutate(
has_senior = ifelse(elderly > 0, 1, 0),
only_seniors = ifelse(elderly == hhsize, 1, 0)
)
rm(list=ls())
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/visualizations_and_general_analysis.R")
acs_data
ggplot(data=acs_dat) +
geom_histogram(aes(x=hhsize, fill=has_senior))
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior))
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1, position="fill")
acs_data$has_senior
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=mean(has_senior)), binwidth=1, position="fill")
acs_data <-acs_data %>%  mutate(
has_senior = as.factor(ifelse(elderly > 0, "Has Elderly", "Doesn't have Elderly")),
only_seniors = as.factor(ifelse(elderly == hhsize, "Only Elderly", "No Elderly"))
)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1, position="fill")
mean(has_senior)
mean(acs_data$elderly >0)
mean(acs_data$elderly == acs_data$hhsize)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize))
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize), binwidth=1)
mean(acs_data$elderly >0)
mean(acs_data$elderly == acs_data$hhsize)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=only_senior), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=only_seniors), binwidth=1, position="fill")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
#Predicted number of seniors on SNAP
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_on_fsstmp)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors on SNAP by PUMA",
fill = "Predicted number\nof Seniors\non SNAP")
warnings()
acs_predicted <- acs_data %>% mutate(
fsstmp_probabilities = fsstmp_predictions
)
acs_predicted_only_seniors <- acs_predicted[acs_predicted$elderly == acs_prediced$hhsize,]
acs_predicted_only_seniors <- acs_predicted[acs_predicted$elderly == acs_predicted$hhsize,]
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsstmp_probabilities, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
#https://www.geoplatform.gov/metadata/258db7ce-2581-4488-bb5e-e387b6119c7a
sf_data <- st_read("./data/tl_2023_19_puma20/tl_2023_19_puma20.shp")
colnames(sf_data)[colnames(sf_data) == "GEOID20"] = "PUMA"
map_data <- sf_data %>%
left_join(summary_by_PUMA, by = "PUMA")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
ggsave("figures/propotion_of_seniors_predicted.png")
#Load in Senior Data
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_on_fsstmp = floor(proportion_on_assistance*senior_population)
)
ggplot(data = senior_data) +
geom_sf(aes(fill = senior_population)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of Seniors by PUMA",
fill = "Population of\nSeniors")
ggsave("figures/number_of_seniors_by_puma.png")
#Predicted number of seniors on SNAP
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_on_fsstmp)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors on SNAP by PUMA",
fill = "Predicted number\nof Seniors\non SNAP")
ggsave("figures/number_on_seniors_fsstmp.png")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households with Seniors on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=only_seniors), binwidth=1, position="fill")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/visualizations_and_general_analysis.R")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize), binwidth=1)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=only_seniors), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_seniors), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=only_seniors), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1, position="fill")
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(rpart)
library(rpart.plot)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
source("./code/clean_cps.R")
source("./code/clean_acs.R")
#Predictors are shooting way to high
#Can add or remove including all squared and interaction terms
#Found that in fsstmp, this didn't improve our model much
include_squared_interaction = FALSE
cps_data <- as.data.frame(cps_data)
cps_data <- cps_data %>% mutate(
FSSTMPVALC_bin_fact = as.factor(FSSTMPVALC_bin_char)
)
#(specificity, sensitivity)
###############################
#       Train Test Split      #
###############################
RNGkind(sample.kind = "default")
set.seed(1342141)
train.idx <- sample(x=1:nrow(cps_data), size=.7*nrow(cps_data))
train.df <- cps_data[train.idx,]
test.df <- cps_data[-train.idx,]
test.df.preds <- test.df
x_vars = c("hhsize", "female", "hispanic", "black", "faminc_cleaned",
"kids", "elderly", "education", "married", "donut")
y_var = c("FSSTMPVALC_bin")
###########################
#   Food Stamp Analysis   #
###########################
#Create more visualizations
#Choose a model to use
#Combine FSSTMP and WROUTY to see if there are big differences
varImpPlot(rf_fswrouty, type=1)
rf_vi <- as.data.frame(varImpPlot(rf_fswrouty, type=1))
>>>>>>> e33efbaa2a939f1bbc91bb73d372f5900853039b
rf_vi$Variable <- rownames(rf_vi)
rf_vi <- rf_vi %>% arrange(desc(MeanDecreaseAccuracy))
#----Random Tree----
#Create big tree, then prune
set.seed(578493768)
ctree <- rpart(FSFOODS ~ hhsize + married + education + elderly +
kids + black + hispanic + female+ faminc_cleaned + donut,
data = train.df, #training data, NOT original data
method = "class",
control = rpart.control(cp = 0.0001, minsplit = 1))
printcp(ctree)
optimalcp <- ctree$cptable[which.min(ctree$cptable[,"xerror"]),"CP"]
#gives you the optimal complexity parameter (cp of tree with smallest xerror)
#prune to create tuned tree
ctree2 <- prune(ctree, cp = optimalcp)
rpart.plot(ctree2)
#----Compare Models' Performances----
#First, on the testing data split
test.df.cpspreds <- test.df %>%
mutate(
mle_pred = predict(lr_mle_fsfoods, test.df, type = "response"),
fmle_pred = predict(lr_fmle_fsfoods, test.df, type = "response"),
lasso_pred = predict(fsfoods_lasso_f1, fsfoods.x.test, type = "response")[,1],
ridge_pred = predict(fsfoods_ridge_f1, fsfoods.x.test, type = "response")[,1],
rf_pi_hat = predict(final_forest, rf_test, type="prob")[,"1"],
rt_pi_hat = predict(ctree2, test.df, type = "prob")[,"1"]
)
#Fit ROC Curves on CPS
mle_rocCurve <- roc(response = as.factor(test.df.cpspreds$FSFOODS),
predictor = test.df.cpspreds$mle_pred,
levels = c("0", "1"))
fmle_rocCurve<- roc(response = as.factor(test.df.cpspreds$FSFOODS),
predictor = test.df.cpspreds$fmle_pred,
levels = c("0", "1"))
lasso_rocCurve <- roc(response = as.factor(test.df.cpspreds$FSFOODS),
predictor = test.df.cpspreds$lasso_pred,
levels = c("0", "1"))
ridge_rocCurve <- roc(response = as.factor(test.df.cpspreds$FSFOODS),
predictor = test.df.cpspreds$ridge_pred,
levels = c("0", "1"))
rf_rocCurve <- roc(response=rf_test$FSFOODS_fact,
predictor=test.df.cpspreds$rf_pi_hat,
levels=c("0", "1"))
rt_rocCurve <- roc(response = as.factor(test.df.cpspreds$FSFOODS),
predictor = test.df.cpspreds$rt_pi_hat,
levels = c("0", "1"))
#PLOT CPS PREDICTIONS
#make data frame of MLE ROC info
mle_data <- data.frame(
Model = "MLE",
Specificity = mle_rocCurve$specificities,
Sensitivity = mle_rocCurve$sensitivities,
AUC = as.numeric(mle_rocCurve$auc)
)
#make data frame of Firth's ROC info
fmle_data<- data.frame(
Model = "Firth's",
Specificity = fmle_rocCurve$specificities,
Sensitivity = fmle_rocCurve$sensitivities,
AUC = as.numeric(fmle_rocCurve$auc)
)
#make data frame of lasso ROC info
lasso_data <- data.frame(
Model = "Lasso",
Specificity = lasso_rocCurve$specificities,
Sensitivity = lasso_rocCurve$sensitivities,
AUC = lasso_rocCurve$auc %>% as.numeric
)
#make data frame of ridge ROC info
ridge_data <- data.frame(
Model = "Ridge",
Specificity = ridge_rocCurve$specificities,
Sensitivity = ridge_rocCurve$sensitivities,
AUC = ridge_rocCurve$auc%>% as.numeric
)
#make data frame of forest ROC info
rf_data <- data.frame(
Model = "Forest",
Specificity = rf_rocCurve$specificities,
Sensitivity = rf_rocCurve$sensitivities,
AUC = rf_rocCurve$auc%>% as.numeric
)
#make data frame of tree ROC info
rt_data <- data.frame(
Model = "Tree",
Specificity = rt_rocCurve$specificities,
Sensitivity = rt_rocCurve$sensitivities,
AUC = rt_rocCurve$auc%>% as.numeric
)
# Combine all the data frames
roc_data <- rbind(mle_data, fmle_data, lasso_data, ridge_data, rf_data, rt_data)
# Plot the data
ggplot() +
geom_line(aes(x = 1 - Specificity, y = Sensitivity, color = Model),data = roc_data) +
geom_text(data = roc_data %>% group_by(Model) %>% slice(1),
aes(x = 0.75, y = c(0.85, 0.75, 0.65, 0.55, 0.45, 0.35), colour = Model,
label = paste0(Model, " AUC = ", round(AUC, 3)))) +
scale_colour_brewer(palette = "Paired") +
labs(x = "1 - Specificity", y = "Sensitivity", color = "Model") +
theme_minimal()
#Then, compare performance on the ACS data THIS NEEDS TO BE CHANGED TO REF THE ACTUAL ACS
#While we don't need to do a split, as all the ACS data is a "test" split
#we still need to create matrices so that we can use lasso and ridge on this data
#Split the data into train/test df forms to use in lasso: this is our best model
#with an AUS of 0.726
#let's get the lasso pi star, then.
lasso_fsfoods_pi_star <- coords(lasso_rocCurve, "best", ref="threshold")$threshold[1]
acs_reduced_test = acs_data %>%
select(all_of(x_vars)) %>%
mutate(
donut = as.factor(donut)
)
summary(acs_reduced_test)
acs_test_data <- model.matrix(~., data=acs_reduced_test)[,-1]
fsfoods_predictions <- predict(fsfoods_lasso_f1, acs_test_data, type="response")[,1]
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = ifelse(fsfoods_predictions > lasso_fsfoods_pi_star, "Enough Food & Kinds of Food", "Not Enough")
)
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsstmp_prediction, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
proportion_only_senior = weighted.mean(only_senior, weight),
has_senior = sum(ifelse(elderly > 0, 1, 0)),
proportion_has_senior = weighted.mean(has_senior, weight)
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_prediction, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
proportion_only_senior = weighted.mean(only_senior, weight),
has_senior = sum(ifelse(elderly > 0, 1, 0)),
proportion_has_senior = weighted.mean(has_senior, weight)
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = ifelse(fsfoods_predictions > lasso_fsfoods_pi_star, "Enough Food & Kinds of Food", "Not Enough")
)
type(fsfoods_prediction)
rlang::last_trace()
acs_data$weight
fsfoods_prediction
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = ifelse(fsfoods_predictions > lasso_fsfoods_pi_star, "Enough Food & Kinds of Food", "Not Enough")
)
acs_predicted$fsfoods_prediction
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_prediction, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
proportion_only_senior = weighted.mean(only_senior, weight),
has_senior = sum(ifelse(elderly > 0, 1, 0)),
proportion_has_senior = weighted.mean(has_senior, weight)
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = as.numeric(ifelse(fsfoods_predictions > lasso_fsfoods_pi_star, "Enough Food & Kinds of Food", "Not Enough"))
)
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_prediction, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
proportion_only_senior = weighted.mean(only_senior, weight),
has_senior = sum(ifelse(elderly > 0, 1, 0)),
proportion_has_senior = weighted.mean(has_senior, weight)
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = ifelse(fsfoods_predictions > lasso_fsfoods_pi_star, 1, 0)
)
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_prediction, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
proportion_only_senior = weighted.mean(only_senior, weight),
has_senior = sum(ifelse(elderly > 0, 1, 0)),
proportion_has_senior = weighted.mean(has_senior, weight)
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_predictions, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
#if only concerned with senior househouds use this data
acs_predicted_only_seniors <- acs_predicted[acs_predicted$elderly > 0,]
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_predictions, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = mean(fsfoods_predictions, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = mean(fsfoods_predictions),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
#https://www.geoplatform.gov/metadata/258db7ce-2581-4488-bb5e-e387b6119c7a
sf_data <- st_read("./data/tl_2023_19_puma20/tl_2023_19_puma20.shp")
colnames(sf_data)[colnames(sf_data) == "GEOID20"] = "PUMA"
map_data <- sf_data %>%
left_join(summary_by_PUMA, by = "PUMA")
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households without Enough Food/Kinds of Food",
fill = "Proportion without\nEnough Food")
ggplot(data=cps_data) +
geom_histogram(aes(x=elderly, fill=FSFOODS), binwidth = 1, position="fill") +
scale_fill_brewer(palette="Dark2")
fsfoods_predictions
fsfoods_prop_preds <- predict(fsfoods_lasso_f1, acs_test_data, type="response")[,1]
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = ifelse(fsfoods_prop_preds > lasso_fsfoods_pi_star, 1, 0)
)
acs_predicted
acs_predicted$fsfoods_prediction
#summary, without weighted mean. this is legal???
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = mean(fsfoods_prop_preds),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
acs_predicted$weight
#summary, without weighted mean. this is legal???
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fsfoods_prop_preds, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
#summary, without weighted mean. this is legal???
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = fsfoods_prop_preds,
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households without Enough Food/Kinds of Food",
fill = "Proportion without\nEnough Food")
proportion_on_assistance
#summary, without weighted mean. this is legal???
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = mean(fsfoods_prop_preds),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households without Enough Food",
fill = "Proportion without\nEnough Food")
map_data
summary_by_PUMA
fsfoods_prop_preds
head(acs_predicted)
head(acs_predicted$fsfoods_prediction)
acs_predicted <- acs_data %>% mutate(
fsfoods_prediction = ifelse(fsfoods_prop_preds > lasso_fsfoods_pi_star, 1, 0),
fsfoods_prop_preds = fsfoods_prop_preds
)
head(acs_predicted$fsfoods_prop_preds)
#summary, without weighted mean. this is legal???
summary_by_PUMA <- acs_predicted %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = mean(fsfoods_prop_preds),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)),
has_senior = sum(ifelse(elderly > 0, 1, 0))
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households without Enough Food",
fill = "Proportion without\nEnough Food")
#https://www.geoplatform.gov/metadata/258db7ce-2581-4488-bb5e-e387b6119c7a
sf_data <- st_read("./data/tl_2023_19_puma20/tl_2023_19_puma20.shp")
colnames(sf_data)[colnames(sf_data) == "GEOID20"] = "PUMA"
map_data <- sf_data %>%
left_join(summary_by_PUMA, by = "PUMA")
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households without Enough Food",
fill = "Proportion without\nEnough Food")
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_has_senior)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households with Senior",
fill = "Proportion of\nHouseholds with\nSeniors")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households",
fill = "Proportion on\nFood Anxiety")
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households without Enough Food",
fill = "Proportion without\nEnough Food")
#Load in Senior Data
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population))
ggplot(data = senior_data) +
geom_sf(aes(fill = senior_population)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of Seniors by PUMA",
fill = "Population of\nSeniors")
senior_data <- senior_data %>% mutate(
seniors_with_fsfoods = floor(proportion_on_assistance*senior_population))
#Predicted number of SENIORS without enough food
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_with_fsfoods)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
<<<<<<< HEAD
labs(title = "Predicted Seniors w/o Enough Food",
fill = "Predicted number\nof Seniors w/o\nEnough Food")
=======
labs(title = "Predicted Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
##  Adding all interaction/squared terms ##
###########################################
reduced_train = train.df %>%
select(c(x_vars, y_var))
reduced_test = test.df %>%
select(c(x_vars, y_var))
#With or without interactions/squared terms
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(reduced_train)[i][1]
col2 = colnames(reduced_train)[j][1]
col_str = paste(col1, col2, sep="_")
if((sapply(reduced_train[col2], class) %in% c("integer", "numeric")) &
(sapply(reduced_train[col1], class) %in% c("integer", "numeric"))){
reduced_train = reduced_train %>%
mutate(interaction_term = (reduced_train[col1] * reduced_train[col2])[,1])
reduced_test = reduced_test %>%
mutate(interaction_term = (reduced_test[col1] * reduced_test[col2])[,1])
names(reduced_train)[names(reduced_train) == "interaction_term"] = col_str
names(reduced_test)[names(reduced_test) == "interaction_term"] = col_str
}
}
}
}
acs_reduced_test = acs_data %>%
select(x_vars)
#Add all squared/interaction terms to ACS data
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
if((sapply(acs_reduced_test[col2], class) %in% c("integer", "numeric")) &
(sapply(acs_reduced_test[col1], class) %in% c("integer", "numeric"))){
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
}
colnames(acs_reduced_test)
acs_reduced_test = acs_data %>%
select(x_vars)
#Add all squared/interaction terms to ACS data
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
if((sapply(acs_reduced_test[col2], class) %in% c("integer", "numeric")) &
(sapply(acs_reduced_test[col1], class) %in% c("integer", "numeric"))){
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
}
colnames(acs_reduced_test)
include_squared_interaction = TRUE
acs_reduced_test = acs_data %>%
select(x_vars)
#Add all squared/interaction terms to ACS data
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
if((sapply(acs_reduced_test[col2], class) %in% c("integer", "numeric")) &
(sapply(acs_reduced_test[col1], class) %in% c("integer", "numeric"))){
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
}
colnames(acs_reduced_test)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=as.factor(donut)), binwidth=1, position="fill")
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=has_senior), binwidth=1, position="fill")
acs_data <-acs_data %>%  mutate(
has_senior = as.factor(ifelse(elderly > 0, "Has Elderly", "Doesn't have Elderly")),
only_seniors = as.factor(ifelse(elderly == hhsize, "Only Elderly", "No Elderly")),
true_donut = as.factor(ifelse(donut != elderly, 1,0))
)
ggplot(data=acs_data) +
geom_histogram(aes(x=hhsize, fill=true_donut), binwidth=1, position="fill")
mean(donut != elderly)
mean(acs_data$donut != acs_data$elderly)
mean(acs_data$donut == acs_data$elderly)
>>>>>>> e33efbaa2a939f1bbc91bb73d372f5900853039b
