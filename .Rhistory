sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / sample_size) * 100, # Percentage of total sample size
Remaining = sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / sample_size) * 100, # Percentage of total sample size
Remaining = sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Set3", labels = c("In Category", "Remaining")) +
labs(
title = "Contribution of Categories to Total Sample Size",
x = "Category",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "plasma", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
library(RColorBrewer)
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fswrouty_probs, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)), #only seniors in the house
has_senior = sum(ifelse(elderly > 0, 1, 0)), #house has senior
one_senior = sum(ifelse(elderly == hhsize & hhsize == 1, 1, 0)) #only 1 senior in the house
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fswrouty_probs, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)), #only seniors in the house
has_senior = sum(ifelse(elderly > 0, 1, 0)), #house has senior
one_senior = sum(ifelse(elderly == hhsize & hhsize == 1, 1, 0)) #only 1 senior in the house
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size"
) +
theme_minimal()
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- nrow(acs_data)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size"
) +
theme_minimal()
elderly_summary
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
elderly_summary
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)/nrow(acs_data)
))
elderly_summary
total_sample_size <- nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
# Calculate proportions relative to the total sample size
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size"
) +
theme_minimal()
elderly_summary
total_sample_size <- nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
elderly_summary
nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with a senior",
"Households with only seniors",
"Households with only seniors",
"Households with one seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
total_sample_size - sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior),
total_sample_size - sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
elderly_summary
ggplot(data=elderly_summary) +
geom_bar(aes(x=Count, y=Category))
ggplot(data=elderly_summary) +
geom_bar(aes(x=Count))
ggplot(data=elderly_summary) +
geom_bar(aes(x=Count, fill=Type))
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Count",
fill = "Type"
) +
scale_fill_brewer(palette = "Set3") +
theme_minimal()
elderly_summary <- data.frame(
Category = c("Households with seniors",
"Households with seniors",
"Households with only seniors",
"Households with only seniors",
"Households with only one seniors",
"Households with only one seniors"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
total_sample_size - sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior),
total_sample_size - sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Count",
fill = "Type"
) +
scale_fill_brewer(palette = "Set3") +
theme_minimal()
total_sample_size <- nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with seniors",
"Households with seniors",
"Households with only seniors",
"Households with only seniors",
"Households with only one seniors",
"Households with only one seniors"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
total_sample_size - sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior),
total_sample_size - sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Count",
fill = "Type"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Sample Size",
fill = "Type"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
test_preds <- test.df %>%
mutate (
ridge_prob = predict(ridge_model, x_test, type = "response"))
test_preds
ridge_rocCurve <- roc(response = as.factor(test_preds$FSWROUTY_bin),
predictor = test_preds$ridge_prob,
levels = c("0", "1"))
plot(ridge_rocCurve, print.thres=TRUE, print.auc=TRUE)
ridge_model %>% coef()
exp(elderly)
exp(-.308)
weighted.mean(acs_predicted_only_seniors$fswrouty_probs, acs_predicted_only_seniors$weight)
cps_data
table(cps_data$FSWROUTY)
923/(1760+923)
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
senior_data
write.csv(acs_predicted_only_seniors, "./data/fswrouty_prediction.csv")
