#01 - Enough and food they want, 02 - Enough not always what is wanted,
#03 - Sometimes not enough to eat, 04 - Often not enough to eat
#https://cps.ipums.org/cps-action/variables/FSFOODS#codes_section
#FSFOODS indicates whether the household had enough to eat or enough of the kinds of foods they wanted to eat in the past twelve months.
#FSWROUTY:
#96 - Refused, 97 - Don't Know, 98 - No response, 99 - NIU (Not In Universe?),
#01 - Never true, 02 - Sometimes true, 03 - Often true
#https://cps.ipums.org/cps-action/variables/FSWROUTY#codes_section
#FSWROUTY indicates if, in the past year, the household was worried that they would run out of food and not be able to afford more
#FSBAL:
#96 - Refused, 97 - Don't Know, 98 - No response, 99 - NIU (Not In Universe?),
#01 - Never true, 02 - Sometimes true, 03 - Often true
#https://cps.ipums.org/cps-action/variables/FSBAL#codes_section
#FSBAL indicates whether or not the respondent(s) could not afford to eat balanced meals at any time in the last 12 months
#FSRAWSCRA:
#00 - No responses/didn't pass screening, 98 - No response, 99 - NIU (Not In Universe?),
#01-10 - number of affirmitive answers given
#https://cps.ipums.org/cps-action/variables/FSRAWSCRA#description_section
#FSRAWSCRA reports the total number of affirmative answers the household provided to the 10 item household/adult food security questionnaire
#FSTOTXPNC:
#https://cps.ipums.org/cps-action/variables/FSTOTXPNC#description_section
#FSTOTXPNC indicates the total amount the household spent on food last week.
ggplot(data=cps_data) +
geom_point(aes(x=hhsize, y=FSTOTXPNC_perpers))
ggplot(data=cps_data) +
geom_point(aes(x=kids, y=FSTOTXPNC_perpers))
ggplot(data=cps_data) +
geom_point(aes(x=elderly, y=FSTOTXPNC_perpers))
ggplot(data=cps_data, aes(x=kids, y=hhsize)) +
geom_count(aes(color=after_stat(n)))
ggplot(data=filter(cps_data, kids==0)) +
geom_point(aes(x=hhsize, y=FSTOTXPNC_perpers))
<<<<<<< Updated upstream
#PREDICTIVE VARIABLES
#hhsize, married, education, elderly, kids, black, hispanic, female, county(?)
#FOCUS Y VARIABLES:
#FSWROUTY - Phuong
#Binary snap no snap FSSTMPVALC - Matt
#FSFOODS - Aria
#FORWARD REGRESSION (IMPROVE):
remove_na = filter(cps_data, !is.na(cps_data$FSWROUTY))
m1 = glm(FSWROUTY ~ hhsize + married + education + elderly + kids + black +
hispanic + female + county + state,
data=remove_na,
weights = weight,
family = binomial(link="logit"))
remove_na = filter(cps_data, !is.na(cps_data$FSWROUTY))
m1 = glm(FSWROUTY ~ hhsize + married + education + elderly + kids + black +
hispanic + female + COUNTY + state,
data=remove_na,
weights = weight,
family = binomial(link="logit"))
remove_na = filter(cps_data, !is.na(cps_data$FSWROUTY))
m1 = glm(FSWROUTY ~ hhsize + married + education + elderly + kids + black +
hispanic + female + COUNTY + STATE,
data=remove_na,
weights = weight,
family = binomial(link="logit"))
remove_na = filter(cps_data, !is.na(cps_data$FSWROUTY))
m1 = glm(FSWROUTY ~ hhsize + married + education + elderly + kids + black +
hispanic + female + COUNTY,
data=remove_na,
weights = weight,
family = binomial(link="logit"))
m0 = glm(FSWROUTY ~ 1,
data=remove_na,
weights = weight,
family = binomial(link="logit"))
v1 = step(m0, scope=list(lower = m0, upper=m1, direction="both"))
summary(v1)
=======
ggplot(data=cps_data, aes(x=kids, y=hhsize)) +
geom_count(aes(color=after_stat(n)))
full_model ~ lm(FSWROOUTY ~., data - cps)
step_model <- step(full_model, direction = "both")
full_model <- lm(FSWROOUTY ~., data - cps)
full_model <- lm(FSWROOUTY ~., data = cps)
full_model <- lm(FSWROUTY ~., data = cps)
step_model <- step(full_model, direction = "both")
summary(step_model)
full_model <- glm(FSWROUTY ~., data = cps)
step_model <- step(full_model, direction = "both")
summary(step_model)
full_model <- glm(FSWROUTY ~., data = cps, weights = weight, family = binomial(link = "logit")
step_model <- step(full_model, direction = "both")
>>>>>>> Stashed changes
#clean FSFOODS analysis file
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
source("./code/clean_cps.R")
source("./code/clean_acs.R")
#Cleaning and Exploring
summary(cps_data)
str(cps_data)
head(cps_data)
cps_data_f <- cps_data[!is.na(cps_data$FSFOODS),]
#Split the data into train/test df forms to use in lasso/ridge later
RNGkind(sample.kind = "default")
set.seed(26473)
train.idx <- sample(x = 1:nrow(cps_data_f), size = .7*nrow(cps_data_f))
train.df <- cps_data_f[train.idx,]
test.df <- cps_data_f[-train.idx,]
lr_mle_fsfoods <- glm(FSFOODS ~ hhsize + married + education + elderly +
kids + black + hispanic + female,
data=train.df,
family=binomial(link="logit"),
weights=weight
)
# Get warnings - algorithm did not converge, complete separation occurred
summary(lr_mle_fsfoods) #grossly high standard error on alll vars
#look at the coefficients from the MLE logistic regression
beta <- lr_mle_fsfoods %>% coef()
#----Lasso and Ridge with Basic X vars----
## Make all necessary matrices and vectors
fsfoods.x.train <- model.matrix(FSFOODS~hhsize + married + education + elderly +
kids + black + hispanic + female,
data = train.df)[,-1]
fsfoods.x.test <- model.matrix(FSFOODS~hhsize + married + education + elderly +
kids + black + hispanic + female,
data = test.df)[,-1]
fsfoods.y.train <- train.df$FSFOODS %>% as.vector()
fsfoods.y.test <- test.df$FSFOODS %>% as.vector()
train.weights <- as.vector(train.df$weight)
test.weights <- as.vector(test.df$weight) #not strictly necessary, for ease of reference
#Use cross validation to get tuning info for final regression
fsfoods_lasso_cv <- cv.glmnet(fsfoods.x.train, #MATRIX without our Y COLUMN
fsfoods.y.train, #VECTOR - our Y COLUMN
family = binomial(link = "logit"),
alpha = 1 #1 for lasso, 0 for ridge
)
#clean FSFOODS analysis file
rm(list=ls())
source("./code/clean_cps.R")
rlang::last_trace()
library(dplyr)
source("./code/clean_cps.R")
cps_data_f <- cps_data[!is.na(cps_data$FSFOODS),]
summary(cps_data_f$FSFOODS) #new subset without NAs has 6665 obs, compared to 8420 originally
summary(cps_data_f)
#Split the data into train/test df forms to use in lasso/ridge later
RNGkind(sample.kind = "default")
set.seed(26473)
train.idx <- sample(x = 1:nrow(cps_data_f), size = .7*nrow(cps_data_f))
train.df <- cps_data_f[train.idx,]
test.df <- cps_data_f[-train.idx,]
lr_mle_fsfoods <- glm(FSFOODS ~ hhsize + married + education + elderly +
kids + black + hispanic + female,
data=train.df,
family=binomial(link="logit"),
weights=weight
)
cps_data <- cps_data %>% mutate(
faminc_cleaned = case_when(faminc == 843 ~ 150000,
faminc == 830 ~ 60000,
faminc == 100 ~ 0,
faminc == 730 ~ 35000,
faminc == 842 ~ 100000,
faminc == 300 ~ 7500,
faminc == 720 ~ 30000,
faminc == 740 ~ 40000,
faminc == 710 ~ 25000,
faminc == 841 ~ 75000,
faminc == 600 ~ 20000,
faminc == 500 ~ 15000,
faminc == 820 ~ 50000,
faminc == 430 ~ 10000,
faminc == 210 ~ 50000,
faminc == 470 ~ 12500,
TRUE ~ NA)
)
rlang::last_trace()
source("~/GitHub/STAT172Final/code/clean_cps.R")
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
cps <- read.csv("./data/cps_00006.csv")
head(cps[,c("CPSID","PERNUM", "FSSTATUS", "FSSTATUSMD", "RACE","EDUC")]) %>% kable
summary(cps)
cps <- cps %>% mutate(SEX = SEX-1,
CHILD = ifelse(AGE < 18, 1, 0),
ELDERLY = ifelse(AGE > 59, 1, 0),
BLACK = ifelse(RACE==200, 1, 0),
HISPANIC = ifelse(HISPAN>0,1,0),
EDUC = as.integer(EDUC %in% c(91 ,92, 111, 123, 124, 125)),
EMP = as.integer(EMPSTAT%in% c(1,10,12)),
MARRIED = as.integer(MARST %in% c(1,2)),
DIFF = ifelse(DIFFANY==2,1,0),
COUNT = as.factor(COUNTY)
)
#Not currently grouping properly
cps_data <- cps %>% group_by(CPSID=as.factor(CPSID)) %>%
summarise(
county = first(COUNTY),
weight = first(HWTFINL),
hhsize = n(),
#Y variables
#All should be the same for each person in the household
#Search for more info about vars here: https://cps.ipums.org/cps-action/variables/search
FSTOTXPNC_perpers = first(FSTOTXPNC)/hhsize, #Different from packet, but needed for summary
FSSTATUS = first(FSSTATUS),
FSSTATUSMD = first(FSSTATUSMD),
FSFOODS = first(FSFOODS),
FSWROUTY = first(FSWROUTY),
FSBAL = first(FSBAL),
FSRAWSCRA = first(FSRAWSCRA),
FSTOTXPNC = first(FSTOTXPNC),
FSSTMPVALC = first(FSSTMPVALC),
#FSSTATUS = first(FSSTATUS),
#FSTMPVALC, FSRAWSCRM,
female = sum(SEX),
hispanic = sum(HISPANIC),
black = sum(BLACK),
kids = sum(CHILD),
elderly = sum(ELDERLY),
education = sum(EDUC),
married = sum(MARRIED),
faminc = first(FAMINC),
donut = ifelse(hhsize == (elderly+kids), 1, 0)
) %>% ungroup()
cps_data <- cps_data %>% mutate(
faminc_cleaned = case_when(faminc == 843 ~ 150000,
faminc == 830 ~ 60000,
faminc == 100 ~ 0,
faminc == 730 ~ 35000,
faminc == 842 ~ 100000,
faminc == 300 ~ 7500,
faminc == 720 ~ 30000,
faminc == 740 ~ 40000,
faminc == 710 ~ 25000,
faminc == 841 ~ 75000,
faminc == 600 ~ 20000,
faminc == 500 ~ 15000,
faminc == 820 ~ 50000,
faminc == 430 ~ 10000,
faminc == 210 ~ 50000,
faminc == 470 ~ 12500,
TRUE ~ NA)
)
str(cps_data)
head(cps_data)
summary(cps_data)
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
cps <- read.csv("./data/cps_00006.csv")
head(cps[,c("CPSID","PERNUM", "FSSTATUS", "FSSTATUSMD", "RACE","EDUC")]) %>% kable
#https://cps.ipums.org/cps-action/variables/search
summary(cps)
#map_chr(cps, ~attr(.x, "label")) %>%
#  bind_cols(names=names(cps), question = .) %>%
#  rownames_to_column(var="Variable Name") %>% kable
#Using lower bound estimates for FAMINC
cps <- cps %>% mutate(SEX = SEX-1,
CHILD = ifelse(AGE < 18, 1, 0),
ELDERLY = ifelse(AGE > 59, 1, 0),
BLACK = ifelse(RACE==200, 1, 0),
HISPANIC = ifelse(HISPAN>0,1,0),
EDUC = as.integer(EDUC %in% c(91 ,92, 111, 123, 124, 125)),
EMP = as.integer(EMPSTAT%in% c(1,10,12)),
MARRIED = as.integer(MARST %in% c(1,2)),
DIFF = ifelse(DIFFANY==2,1,0),
COUNT = as.factor(COUNTY)
)
#Not currently grouping properly
cps_data <- cps %>% group_by(CPSID=as.factor(CPSID)) %>%
summarise(
county = first(COUNTY),
weight = first(HWTFINL),
hhsize = n(),
#Y variables
#All should be the same for each person in the household
#Search for more info about vars here: https://cps.ipums.org/cps-action/variables/search
FSTOTXPNC_perpers = first(FSTOTXPNC)/hhsize, #Different from packet, but needed for summary
FSSTATUS = first(FSSTATUS),
FSSTATUSMD = first(FSSTATUSMD),
FSFOODS = first(FSFOODS),
FSWROUTY = first(FSWROUTY),
FSBAL = first(FSBAL),
FSRAWSCRA = first(FSRAWSCRA),
FSTOTXPNC = first(FSTOTXPNC),
FSSTMPVALC = first(FSSTMPVALC),
#FSSTATUS = first(FSSTATUS),
#FSTMPVALC, FSRAWSCRM,
female = sum(SEX),
hispanic = sum(HISPANIC),
black = sum(BLACK),
kids = sum(CHILD),
elderly = sum(ELDERLY),
education = sum(EDUC),
married = sum(MARRIED),
faminc = first(FAMINC),
donut = ifelse(hhsize == (elderly+kids), 1, 0)
) %>% ungroup()
cps_data <- cps_data %>% mutate(
faminc_cleaned = case_when(faminc == 843 ~ 150000,
faminc == 830 ~ 60000,
faminc == 100 ~ 0,
faminc == 730 ~ 35000,
faminc == 842 ~ 100000,
faminc == 300 ~ 7500,
faminc == 720 ~ 30000,
faminc == 740 ~ 40000,
faminc == 710 ~ 25000,
faminc == 841 ~ 75000,
faminc == 600 ~ 20000,
faminc == 500 ~ 15000,
faminc == 820 ~ 50000,
faminc == 430 ~ 10000,
faminc == 210 ~ 50000,
faminc == 470 ~ 12500,
TRUE ~ NA)
)
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
plot(lasso_fsstmp_rocCurve, print.thres=TRUE, print.auc=TRUE) #Better at AUC = .798, (.681, .810)
plot(ridge_fsstmp_rocCurve, print.thres=TRUE, print.auc=TRUE) #.800 (.684,.810)
table(acs_reduced_test$faminc_cleaned)
nrow(table(acs_reduced_test$faminc_cleaned))
nrow(table(cps_data$faminc))
nrow(table(cps_data$faminc_cleaned))
clear
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
summary(acs_data)
fsstmp_predictions
summary(acs_test_data)
acs_test_data <- model.matrix(~., data=acs_reduced_test)[,-1]
fsstmp_predictions <- predict(lr_lasso_fsstmp, acs_test_data, type="response")[,1]
acs_predicted <- acs_data %>% mutate(
fsstmp_prediction = ifelse(fsstmp_predictions > lasso_fsstmp_pi_star, "On Assistance", "Not On Assistance")
)
acs_test_data
dim(acs_test_data)
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(rpart)
library(rpart.plot)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
source("./code/clean_cps.R")
source("./code/clean_acs.R")
acs_reduced_test = acs_data %>%
select(x_vars) %>%
mutate(
donut = as.factor(donut)
)
include_squared_interaction = FALSE
cps_data <- as.data.frame(cps_data)
cps_data <- cps_data %>% mutate(
FSSTMPVALC_bin_fact = as.factor(FSSTMPVALC_bin_char),
donut = as.factor(donut)
)
#(specificity, sensitivity)
###############################
#       Train Test Split      #
###############################
RNGkind(sample.kind = "default")
set.seed(159159)
train.idx <- sample(x=1:nrow(cps_data), size=.7*nrow(cps_data))
train.df <- cps_data[train.idx,]
test.df <- cps_data[-train.idx,]
test.df.preds <- test.df
x_vars = c("hhsize", "female", "hispanic", "black", "faminc_cleaned",
"kids", "elderly", "education", "married", "donut")
y_var = c("FSSTMPVALC_bin")
###########################
#   Food Stamp Analysis   #
###########################
#Create more visualizations
#Choose a model to use
#Combine FSSTMP and WROUTY to see if there are big differences
#Add weighted means
###########################################
##  Adding all interaction/squared terms ##
###########################################
reduced_train = train.df %>%
select(c(x_vars, y_var))
reduced_test = test.df %>%
select(c(x_vars, y_var))
acs_reduced_test = acs_data %>%
select(x_vars) %>%
mutate(
donut = as.factor(donut)
)
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
acs_test_data <- model.matrix(~., data=acs_reduced_test)[,-1]
dim(acs-test_data)
dim(acs_test_data)
table(acs_data$faminc_cleaned)
acs_data[acs_data$faminc_cleaned == "ASDLKJASD"]
acs_data[acs_data$faminc_cleaned == "ASDLKJASD",]
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(rpart)
library(rpart.plot)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
source("./code/clean_cps.R")
source("./code/clean_acs.R")
include_squared_interaction = FALSE
cps_data <- as.data.frame(cps_data)
cps_data <- cps_data %>% mutate(
FSSTMPVALC_bin_fact = as.factor(FSSTMPVALC_bin_char),
donut = as.factor(donut)
)
#(specificity, sensitivity)
###############################
#       Train Test Split      #
###############################
RNGkind(sample.kind = "default")
set.seed(159159)
train.idx <- sample(x=1:nrow(cps_data), size=.7*nrow(cps_data))
train.df <- cps_data[train.idx,]
test.df <- cps_data[-train.idx,]
test.df.preds <- test.df
x_vars = c("hhsize", "female", "hispanic", "black", "faminc_cleaned",
"kids", "elderly", "education", "married", "donut")
y_var = c("FSSTMPVALC_bin")
###########################
#   Food Stamp Analysis   #
###########################
#Create more visualizations
#Choose a model to use
#Combine FSSTMP and WROUTY to see if there are big differences
#Add weighted means
###########################################
##  Adding all interaction/squared terms ##
###########################################
reduced_train = train.df %>%
select(c(x_vars, y_var))
reduced_test = test.df %>%
select(c(x_vars, y_var))
#Add all squared/interaction terms to ACS data
acs_reduced_test = acs_data %>%
select(x_vars) %>%
mutate(
donut = as.factor(donut)
)
if(include_squared_interaction){
for(i in 1:length(x_vars)){
for (j in i:length(x_vars)){
col1 = colnames(acs_reduced_test)[i][1]
col2 = colnames(acs_reduced_test)[j][1]
col_str = paste(col1, col2, sep="_")
acs_reduced_test = acs_reduced_test %>%
mutate(interaction_term = (acs_reduced_test[col1] * acs_reduced_test[col2])[,1])
names(acs_reduced_test)[names(acs_reduced_test) == "interaction_term"] = col_str
}
}
}
acs_test_data <- model.matrix(~., data=acs_reduced_test)[,-1]
unique(acs_data$faminc_cleaned)
acs_data[acs_data$faminc_cleaned == "ASDLKJASD",]
acs_data[acs_data$faminc_cleaned == "ASDLKJASD", faminc]
acs_data[acs_data$faminc_cleaned == "ASDLKJASD", "faminc"]
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
renv::dependencies()
install.packages("renv")
renv::dependencies()
dep <- renv::dependencies()
unique(dep$Package)
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
