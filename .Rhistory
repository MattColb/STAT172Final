<<<<<<< HEAD
Category = c("Households with seniors",
"Households without seniors"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_size - sum(summary_by_PUMA$has_senior)
),
Type = c("Senior", "Remaining")
)
ggplot(elderly_anxiety_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Sample Size",
fill = "Type"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
ggplot(anxiety_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Sample Size",
fill = "Type"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
# Calculate total households with seniors
total_households_with_seniors <- sum(summary_by_PUMA$has_senior)
# Calculate households with seniors having food anxiety
households_with_seniors_anxiety <- model_data %>%
filter(FSWROUTY_bin == 1 & elderly > 0) %>%
nrow()
# Proportion of households with seniors having food anxiety
proportion_with_anxiety <- households_with_seniors_anxiety / total_households_with_seniors
# Create a summary table for visualization
anxiety_proportions <- data.frame(
Category = c("With Food Anxiety", "Without Food Anxiety"),
Count = c(
households_with_seniors_anxiety,
total_households_with_seniors - households_with_seniors_anxiety
),
Proportion = c(
proportion_with_anxiety,
1 - proportion_with_anxiety
)
)
# Visualization
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Category)) +
geom_bar(stat = "identity") +
labs(
title = "Proportion of Households with Seniors Having Food Anxiety",
x = "Household Type",
y = "Proportion",
fill = "Category"
) +
theme_minimal()
cps_data
model_data
anxiety_proportions
# Visualization
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Category)) +
geom_bar(stat = "identity") +
labs(
title = "Proportion of Households with Seniors Having Food Anxiety",
x = "Household Type",
y = "Proportion",
fill = "Category"
) +
scale_fill_brewer(palette = "Dark2" +
theme_minimal()
# Visualization
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Category)) +
# Visualization
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Type)) +
geom_bar(stat = "identity") +
labs(
title = "Proportion of Households with Seniors Having Food Anxiety",
x = "Household Type",
y = "Proportion",
fill = "Category"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
# Calculate total households with seniors
total_households_with_seniors <- sum(summary_by_PUMA$has_senior)
# Calculate households with seniors having food anxiety
households_with_seniors_anxiety <- model_data %>%
filter(FSWROUTY_bin == 1 & elderly > 0) %>%
nrow()
# Proportion of households with seniors having food anxiety
proportion_with_anxiety <- households_with_seniors_anxiety / total_households_with_seniors
# Create a summary table for visualization
anxiety_proportions <- data.frame(
Category = c("With Food Anxiety", "Without Food Anxiety"),
Count = c(
households_with_seniors_anxiety,
total_households_with_seniors - households_with_seniors_anxiety
),
Proportion = c(
proportion_with_anxiety,
1 - proportion_with_anxiety
)
)
# Visualization
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Category)) +
geom_bar(stat = "identity") +
labs(
title = "Proportion of Households with Seniors Having Food Anxiety",
x = "Household Type",
y = "Proportion",
fill = "Category"
) +
theme_minimal()
# Visualization
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Category)) +
geom_bar(stat = "identity") +
labs(
title = "Proportion of Households with Seniors Having Food Anxiety",
x = "Household Type",
y = "Proportion",
fill = "Category"
) +
theme_minimal()
ggplot(anxiety_proportions, aes(x = Category, y = Proportion, fill = Category)) +
geom_bar(stat = "identity") +
labs(
title = "Proportion of Households with Seniors Having Food Anxiety",
x = "Household Type",
y = "Proportion",
fill = "Category"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
acs_predicted_only_seniors <- acs_predicted[acs_predicted$elderly > 0,]
acs_predicted
coef(acs_predicted_only_seniors)
acs_predicted_only_seniors %>% coef()
acs_predicted%>% coef()
head(acs_predicted_only_seniors)
weighted.mean(acs_predicted_only_seniors$fswrouty_probs, acs_predicted_only_seniors$weight)
coef(fswrouty_ridge, s="lambda.min") %>% as.matrix()
exp(-0.20418350)
1- exp(-0.20418350)
weighted.mean(acs_predicted$fswrouty_probs, acs_predicted$weight)
weighted.mean(acs_predicted_only_seniors$fswrouty_probs, acs_predicted_only_seniors$weight)
coef(summary_by_PUMA)
senior_data
head(senior_data)
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
gc()
rm(list=ls())
library(tidyverse)
library(knitr)
library(tibble)
library(ggthemes)
library(logistf)
library(glmnet)
library(haven)
library(pROC)
library(RColorBrewer)
library(randomForest)
library(ggplot2)
library(reshape2)
library(randomForest)
library(logistf)
library(RColorBrewer)
source("code/clean_cps.R")
# change y-variable into factor
cps_data$FSWROUTY_binchar <- ifelse(cps_data$FSWROUTY == 0, "No", "Yes")
# handle missing values
cps_data <- cps_data[!is.na(cps_data$FSWROUTY_binchar),]
# cps_data <- cps_data %>% mutate(FSWROUTY_bin = as.factor(FSWROUTY_binchar))
cps_data <- cps_data %>% mutate(FSWROUTY_bin = ifelse(FSWROUTY_binchar == "No", 0, 1))
summary(cps_data)
head(cps_data)
# Combine cluster memberships with other features
model_data <- cps_data[, c("FSWROUTY_bin", "weight", "hhsize",
"female", "hispanic", "black", "kids", "elderly",
"education", "married", "faminc_cleaned")]
# splitting training and testing
RNGkind(sample.kind = "default")
set.seed(159159)
train.idx <- sample(x=1:nrow(model_data), size=.7*nrow(model_data))
train.df <- model_data[train.idx,]
test.df <- model_data[-train.idx,]
#################
x_vars = c("hhsize", "female", "hispanic", "black", "kids", "elderly",
"education", "married", "faminc_cleaned")
################ MLE #########################
fswrouty_mle <- glm(FSWROUTY_bin ~ hhsize + married + education + elderly + kids
+ black + hispanic + female + faminc_cleaned,
data = train.df,
family = binomial(link = 'logit'),
weights = weight)
summary(fswrouty_mle)
#Since all variables are seen as significant because of complete separation
test_preds <- test.df %>%
mutate(
mle_fswrouty_prob = predict(fswrouty_mle, test.df , type="response")
)
mle_fswrouty_rocCurve <- roc(
response=as.factor(test_preds$FSWROUTY_bin),
predictor= test_preds$mle_fswrouty_prob,
levels=c("0","1"))
plot(mle_fswrouty_rocCurve, print.thres=TRUE, print.auc=TRUE)
################## Firth's Penalized Likelihood ###################
firths_fswrouty <- logistf(FSWROUTY_bin ~ hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned,
data=train.df,
weights=weight)
summary(firths_fswrouty)
firths_fswrouty_beta <- firths_fswrouty %>% coef()
test_preds <- test.df %>%
mutate(
firths_fswrouty_prob = predict(firths_fswrouty, test.df , type="response")
)
firths_fswrouty_rocCurve <- roc(
response=test_preds$FSWROUTY_bin,
predictor= test_preds$firths_fswrouty_prob,
levels=c("0","1"))
plot(firths_fswrouty_rocCurve, print.thres=TRUE, print.auc=TRUE)
firth_fswrouty_pi_hat <- coords(firths_fswrouty_rocCurve, "best", ref="threshold")$threshold[1]
############# RANDOM FOREST ###################
x_vars <- c("hhsize", "female", "hispanic", "black", "faminc_cleaned",
"kids", "elderly", "education", "married")
#Multiple mtry
mtry = c(1:length(x_vars))
keeps <- data.frame(m=rep(NA, length(mtry)),
OOB_err_rate = rep(NA, length(mtry)))
for (idx in 1:length(mtry)){
print(paste0("Trying m = ", mtry[idx]))
tempforest <- randomForest(as.factor(FSWROUTY_bin) ~ hhsize + married + education
+ elderly + kids + black + hispanic + female
+ faminc_cleaned,
data= train.df,
ntree=1000,
mtry=mtry[idx])
keeps[idx, "m"] <- mtry[idx]
keeps[idx, "OOB_err_rate"] <- mean(predict(tempforest) != train.df$FSWROUTY_bin) #Estimates out of sample error
}
best_m <- keeps[order(keeps$OOB_err_rate),"m"][1]
ggplot(keeps, aes(x = m, y = OOB_err_rate)) +
geom_line() +
geom_point() +
labs(title = "OOB Error Rate vs mtry",
x = "mtry",
y = "OOB Error Rate") +
theme_minimal()
# final RF model
rf_fswrouty <- randomForest(as.factor(FSWROUTY_bin) ~ hhsize + married + education
+ elderly + kids + black + hispanic + female
+ faminc_cleaned,
data = train.df,
ntree = 1000,
mtry = 2,
importance = TRUE)
# Validate model as predictive tool
pi_hat <- predict(rf_fswrouty, test.df, type = "prob")[, "1"] #Choose positive event column
rf_rocCurve <- roc(response = test.df$FSWROUTY_bin,
predictor = pi_hat,
levels = c("0", "1"))
plot(rf_rocCurve, print.thres = TRUE, print.ouc = TRUE)
auc(rf_rocCurve)
pi_star <- coords(rf_rocCurve, "best", ret="threshold")$threshold[1]
test_preds <- test.df %>% mutate(
rf_preds = as.factor(ifelse(pi_hat > pi_star, "Yes", "No"))
)
varImpPlot(rf_fswrouty, type=1)
rf_vi <- as.data.frame(varImpPlot(rf_fswrouty, type=1))
rf_vi$Variable <- rownames(rf_vi)
rf_vi <- rf_vi %>% arrange(desc(MeanDecreaseAccuracy))
################ Tree #####################
library(rpart)
library(rpart.plot)
ctree <- rpart(FSWROUTY_bin ~ hhsize + married + education + elderly +
kids + black + hispanic + female + faminc_cleaned,
data= train.df,
weights = weight,
method="class",
control=rpart.control(cp=.0001, minsplit=1))
optimalcp <- ctree$cptable[which.min(ctree$cptable[,"xerror"]), "CP"]
ctree_optimal <- prune(ctree, cp=optimalcp)
rpart.plot(ctree_optimal)
pi_hat <- predict(ctree_optimal, test.df, type="prob")[,"1"]
ctree_rocCurve <- roc(response=test.df$FSWROUTY_bin,
predictor=pi_hat,
levels=c("0", "1"))
plot(ctree_rocCurve, print.thres=TRUE, print.auc=TRUE)
ctree_pi_star <- coords(rf_rocCurve, "best", ret="threshold")$threshold[1]
test_preds <- test_preds %>% mutate(
ctree_preds = as.factor(ifelse(pi_hat > ctree_pi_star, "Yes", "No"))
)
###########################################
x_train <- model.matrix(FSWROUTY_bin ~ hhsize + married + education + elderly + kids
+ black + hispanic + female + faminc_cleaned
, data=train.df)[,-1]
x_test <- model.matrix(FSWROUTY_bin ~ hhsize + married + education + elderly + kids
+ black + hispanic + female + faminc_cleaned
, data=test.df)[,-1]
# y_train <- as.numeric(train.df$FSWROUTY_bin) - 1  # Convert factor (1, 2) to binary (0, 1)
y_test <- as.vector(test.df$FSWROUTY_bin)
y_train <- as.vector(train.df$FSWROUTY_bin)
########### LASSO ##################
fswrouty_lasso <- cv.glmnet(x_train, y_train, family=binomial(link="logit"), alpha = 1)
plot(fswrouty_lasso)
best_lambda_lasso <- fswrouty_lasso$lambda.min
coef(fswrouty_lasso, s="lambda.min") %>% as.matrix()
# cluster 2, 4, and 5 went to 0
lasso_model <- glmnet(x_train, y_train, family=binomial(link="logit"),
alpha = 1,
lambda = best_lambda_lasso,
weights = as.vector(train.df$weight)
)
# predict probability on the test set
test_preds <- test.df %>%
mutate (
lasso_prob = predict(lasso_model, x_test, type = "response"))
lasso_rocCurve <- roc(response = as.factor(test_preds$FSWROUTY_bin),
predictor = test_preds$lasso_prob,
levels = c("0", "1"))
plot(lasso_rocCurve, print.thres=TRUE, print.auc=TRUE)
########### RIDGE ##############
fswrouty_ridge <- cv.glmnet(x_train, y_train, family=binomial(link="logit"), alpha = 0)
plot(fswrouty_ridge)
best_lambda_ridge <- fswrouty_ridge$lambda.min
coef(fswrouty_ridge, s="lambda.min") %>% as.matrix()
ridge_model <- glmnet(x_train, y_train, family=binomial(link="logit"),
alpha = 0,
lambda = best_lambda_lasso,
weights = as.vector(train.df$weight))
ridge_model %>% coef()
# predict probability on the test set
test_preds <- test.df %>%
mutate (
ridge_prob = predict(ridge_model, x_test, type = "response"))
ridge_rocCurve <- roc(response = as.factor(test_preds$FSWROUTY_bin),
predictor = test_preds$ridge_prob,
levels = c("0", "1"))
plot(ridge_rocCurve, print.thres=TRUE, print.auc=TRUE)
########## COMBINE ROC CURVE ################
#make data frame of MLE ROC info
mle_data_fswrouty <- data.frame(
Model = "MLE",
Specificity = mle_fswrouty_rocCurve$specificities,
Sensitivity = mle_fswrouty_rocCurve$sensitivities,
AUC = as.numeric(mle_fswrouty_rocCurve$auc)
)
#make data frame of Firths ROC info
firths_data_fswrouty <- data.frame(
Model = "Firths",
Specificity = firths_fswrouty_rocCurve$specificities,
Sensitivity = firths_fswrouty_rocCurve$sensitivities,
AUC = as.numeric(firths_fswrouty_rocCurve$auc)
)
#make data frame of lasso ROC info
lasso_data_fswrouty <- data.frame(
Model = "Lasso",
Specificity = lasso_rocCurve$specificities,
Sensitivity = lasso_rocCurve$sensitivities,
AUC = lasso_rocCurve$auc %>% as.numeric
)
#make data frame of ridge ROC info
ridge_data_fswrouty <- data.frame(
Model = "Ridge",
Specificity = ridge_rocCurve$specificities,
Sensitivity = ridge_rocCurve$sensitivities,
AUC = ridge_rocCurve$auc%>% as.numeric
)
# make data frame of ctree ROC info
ctree_fswrouty <- data.frame(
Model = "Categorical Tree",
Specificity = ctree_rocCurve$specificities,
Sensitivity = ctree_rocCurve$sensitivities,
AUC = ctree_rocCurve$auc %>% as.numeric
)
rf_fswrouty <- data.frame(
Model = "Random Forest",
Specificity = rf_rocCurve$specificities,
Sensitivity = rf_rocCurve$sensitivities,
AUC = rf_rocCurve$auc %>% as.numeric
)
# Combine all the data frames
roc_data <- rbind(firths_data_fswrouty, lasso_data_fswrouty,
ridge_data_fswrouty, rf_fswrouty, ctree_fswrouty)
# Plot the data
ggplot() +
geom_line(aes(x = 1 - Specificity, y = Sensitivity, color = Model),data = roc_data) +
geom_text(data = roc_data %>% group_by(Model) %>% slice(1),
aes(x = 0.75, y = c(0.75, 0.65, 0.55, 0.45, 0.35), colour = Model,
label = paste0(Model, " AUC = ", round(AUC, 5)))) +
scale_colour_brewer(palette = "Paired") +
labs(x = "1 - Specificity", y = "Sensitivity", color = "Model") +
theme_minimal()
source("./code/clean_acs.R")
acs_reduced_test = acs_data %>%
select(x_vars)
acs_test_data <- model.matrix(~., data=acs_reduced_test)[,-1]
## MAKE PREDICTIONS ON ACS DATA ##
fswrouty_predictions <- predict(lasso_model, acs_test_data, type="response")[,1]
# Check the first few predictions
head(fswrouty_predictions)
acs_predicted <- acs_data %>% mutate(
fswrouty_probs = fswrouty_predictions
)
acs_predicted_only_seniors <- acs_predicted[acs_predicted$elderly > 0,]
# percentage of senior having food anxiety
weighted.mean(acs_predicted_only_seniors$fswrouty_probs, acs_predicted_only_seniors$weight)
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fswrouty_probs, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)), #only seniors in the house
has_senior = sum(ifelse(elderly > 0, 1, 0)), #house has senior
one_senior = sum(ifelse(elderly == hhsize & hhsize == 1, 1, 0)) #only 1 senior in the house
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
sf_data <- st_read("./data/tl_2023_19_puma20/tl_2023_19_puma20.shp")
colnames(sf_data)[colnames(sf_data) == "GEOID20"] = "PUMA"
map_data <- sf_data %>%
left_join(summary_by_PUMA, by = "PUMA")
map_data
#Proportion of seniors that have food anxiety
ggplot(data = map_data) +
geom_sf(aes(fill = proportion_on_assistance)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households",
fill = "Proportion on\nFood Anxiety")
#Load in Senior Data
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
head(senior_data)
#Predicted number of seniors anxiety
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
single_senior_data <- senior_data %>% mutate(
single_senior_with_fswrouty = floor(proportion_on_assistance*one_senior)
)
ggplot(data = senior_data) +
geom_sf(aes(fill = one_senior)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of Single Senior Household by PUMA",
fill = "Population of\nSeniors")
#Predicted number of seniors anxiety
ggplot(data = single_senior_data) +
geom_sf(aes(fill = seniors_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
#Predicted number of seniors anxiety
ggplot(data = single_senior_data) +
geom_sf(aes(fill = seniors_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Single Household Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
ggplot(data = senior_data) +
geom_sf(aes(fill = one_senior)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of Single-Senior Households by PUMA",
fill = "Single Senior\nHouseholds")
ggplot(data = single_senior_data) +
geom_sf(aes(fill = single_senior_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Food Anxiety in Single-Senior Households by PUMA",
fill = "Predicted Single\nSenior w Food Anxiety")
only_senior_data <- senior_data %>% mutate(
only_senior_with_fswrouty = floor(proportion_on_assistance*only_senior)
)
ggplot(data = senior_data) +
geom_sf(aes(fill = only_senior)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of ONLY-Senior Households by PUMA",
fill = "ONLY Senior\nHouseholds")
#Predicted number of single senior household with food anxiety
ggplot(data = only_senior_data) +
geom_sf(aes(fill = only_senior_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Food Anxiety in ONLY-Senior Households by PUMA",
fill = "Predicted ONLY\nSenior w Food Anxiety")
ggplot(data = senior_data) +
geom_sf(aes(fill = one_senior)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Total Population of Single-Senior Households by PUMA",
fill = "Single Senior\nHouseholds")
ggplot(data = single_senior_data) +
geom_sf(aes(fill = single_senior_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Food Anxiety in Single-Senior Households by PUMA",
fill = "Predicted Single\nSenior w Food Anxiety")
=======
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "Remaining")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size",
fill = "Legend"
) +
theme_minimal()
#How does this adjust with the weights
summary_by_PUMA <- acs_predicted_only_seniors %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
proportion_on_assistance = weighted.mean(fswrouty_probs, weight),
only_senior = sum(ifelse(elderly == hhsize, 1, 0)), #only seniors in the house
has_senior = sum(ifelse(elderly > 0, 1, 0)), #house has senior
one_senior = sum(ifelse(elderly == hhsize & hhsize == 1, 1, 0)) #only 1 senior in the house
) %>% as.data.frame() %>% arrange(desc(proportion_on_assistance))
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- sum(summary_by_PUMA$sample_size)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size"
) +
theme_minimal()
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
# Calculate proportions relative to the total sample size
total_sample_size <- nrow(acs_data)
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size"
) +
theme_minimal()
elderly_summary
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
))
elderly_summary
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)/nrow(acs_data)
))
elderly_summary
total_sample_size <- nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
# Calculate proportions relative to the total sample size
elderly_summary <- elderly_summary %>%
mutate(
Proportion = (Count / total_sample_size) * 100, # Percentage of total sample size
Remaining = total_sample_size - Count         # Remaining households in the sample size
) %>%
pivot_longer(
cols = c("Count", "Remaining"),
names_to = "Metric",
values_to = "Value"
)
elderly_summary$Metric <- factor(elderly_summary$Metric, levels = c("Count", "Remaining"))
# Create the stacked bar chart
ggplot(data = elderly_summary, aes(x = Category, y = Value, fill = Metric)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
scale_fill_brewer(palette = "Dark2", labels = c("Senior Size", "")) +
labs(
title = "Elderly Population",
x = "",
y = "Sample Size"
) +
theme_minimal()
elderly_summary
total_sample_size <- nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with a senior",
"Households with only seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
elderly_summary
nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with a senior",
"Households with a senior",
"Households with only seniors",
"Households with only seniors",
"Households with one seniors",
"Households with one senior"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
total_sample_size - sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior),
total_sample_size - sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
elderly_summary
ggplot(data=elderly_summary) +
geom_bar(aes(x=Count, y=Category))
ggplot(data=elderly_summary) +
geom_bar(aes(x=Count))
ggplot(data=elderly_summary) +
geom_bar(aes(x=Count, fill=Type))
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Count",
fill = "Type"
) +
scale_fill_brewer(palette = "Set3") +
theme_minimal()
elderly_summary <- data.frame(
Category = c("Households with seniors",
"Households with seniors",
"Households with only seniors",
"Households with only seniors",
"Households with only one seniors",
"Households with only one seniors"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
total_sample_size - sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior),
total_sample_size - sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Count",
fill = "Type"
) +
scale_fill_brewer(palette = "Set3") +
theme_minimal()
total_sample_size <- nrow(acs_data)
elderly_summary <- data.frame(
Category = c("Households with seniors",
"Households with seniors",
"Households with only seniors",
"Households with only seniors",
"Households with only one seniors",
"Households with only one seniors"),
Count = c(
sum(summary_by_PUMA$has_senior),
total_sample_size - sum(summary_by_PUMA$has_senior),
sum(summary_by_PUMA$only_senior),
total_sample_size - sum(summary_by_PUMA$only_senior),
sum(summary_by_PUMA$one_senior),
total_sample_size - sum(summary_by_PUMA$one_senior)
),
Type = c("Senior", "Remaining")
)
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Count",
fill = "Type"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
# Create the stacked bar chart
ggplot(elderly_summary, aes(x = Category, y = Count, fill = Type)) +
geom_bar(stat = "identity", position = "stack") +
coord_flip() +
labs(
title = "Household Composition with Senior Members",
x = "Category",
y = "Sample Size",
fill = "Type"
) +
scale_fill_brewer(palette = "Dark2") +
theme_minimal()
test_preds <- test.df %>%
mutate (
ridge_prob = predict(ridge_model, x_test, type = "response"))
test_preds
ridge_rocCurve <- roc(response = as.factor(test_preds$FSWROUTY_bin),
predictor = test_preds$ridge_prob,
levels = c("0", "1"))
plot(ridge_rocCurve, print.thres=TRUE, print.auc=TRUE)
ridge_model %>% coef()
exp(elderly)
exp(-.308)
weighted.mean(acs_predicted_only_seniors$fswrouty_probs, acs_predicted_only_seniors$weight)
cps_data
table(cps_data$FSWROUTY)
923/(1760+923)
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_with_fswrouty)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Seniors w Food Anxiety by PUMA",
fill = "Predicted number\nof Seniors\nwith Food Anxiety")
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
senior_data <- read.csv("./data/iowa_seniors_by_puma.csv")
senior_data <- senior_data %>% mutate("PUMA" = as.character(GEOID))
senior_data <- map_data %>% left_join(senior_data, by="PUMA")
senior_data <- senior_data %>% mutate(
seniors_with_fswrouty = floor(proportion_on_assistance*senior_population)
)
senior_data
write.csv(acs_predicted_only_seniors, "./data/fswrouty_prediction.csv")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/fsstamp_analysis.R")
rm(list=ls())
library(ggplot2)
fswrouty <- read.csv("./data/fswrouty_prediction.csv")
fsstmp <- read.csv("./data/fsstmp_prediction.csv")
head(fsstmp)
length(unique(fsstmp$serialno))
fsstmp %>%  left_join(fswrouty, by="serialno")
merged <- fsstmp %>%  left_join(fswrouty, by="serialno") %>%
select("serialno", "PUMA.x", "fswrouty_probs", "fsstmp_probabilities", "hhsize.x", "weight.x", "elderly.x")
head(merged)
apply(merged$fsstmp_probabilities, 2, function(x)(x - mean(x))/sd(x))
apply(merged, 2, function(x)(x - mean(x))/sd(x))
apply(merged, 2, function(x)(x - mean(x))/sd(x))["fswrouty_probs", "fsstmp_probabilities"]
apply(merged, 2, function(x)(x - mean(x))/sd(x))[,c("fswrouty_probs", "fsstmp_probabilities")]
merged_standard <- merged
merged_standard[,c("fswrouty_probs", "fsstmp_probabilities")] <- apply(merged, 2, function(x)(x - mean(x))/sd(x))[,c("fswrouty_probs", "fsstmp_probabilities")]
merged_standard
merged_standard %>% mutate(
sum_of_z_scores = mean(fswrouty_probs, fsstmp_probabilities)
)
merged_standard %>% mutate(
sum_of_z_scores = (fswrouty_probs + fsstmp_probabilities)/2
)
ggplot(data=merged_standard) + geom_histogram(aes(x = mean_of_z_scores))
ggplot(data=merged_standard) + geom_histogram(aes(x = sum_of_z_scores))
merged_standard <- merged_standard %>% mutate(
mean_of_z_scores = (fswrouty_probs + fsstmp_probabilities)/2
)
ggplot(data=merged_standard) + geom_histogram(aes(x = mean_of_z_scores))
summary_by_PUMA <- merged_standard %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
food_insecurity_metric = weighted.mean(mean_of_z_scores, weight),
) %>% as.data.frame() %>% arrange(desc(food_insecurity_metric))
merged_standard
colnames(merged_standard)
merged <- fsstmp %>%  left_join(fswrouty, by="serialno") %>%
select("serialno", "PUMA.x", "fswrouty_probs", "fsstmp_probabilities", "hhsize.x", "weight.x", "elderly.x")
names(merged)[names(merged) == 'PUMA.x'] <- 'PUMA'
names(merged)[names(merged) == 'hhsize.x'] <- 'hhsize'
names(merged)[names(merged) == 'weight.x'] <- 'weight'
names(merged)[names(merged) == 'elderly.x'] <- 'elderly'
merged_standard <- merged
merged_standard[,c("fswrouty_probs", "fsstmp_probabilities")] <- apply(merged, 2, function(x)(x - mean(x))/sd(x))[,c("fswrouty_probs", "fsstmp_probabilities")]
merged_standard <- merged_standard %>% mutate(
mean_of_z_scores = (fswrouty_probs + fsstmp_probabilities)/2
)
summary_by_PUMA <- merged_standard %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
food_insecurity_metric = weighted.mean(mean_of_z_scores, weight),
) %>% as.data.frame() %>% arrange(desc(food_insecurity_metric))
summary_by_PUMA
summary_by_PUMA <- merged_standard %>% group_by(PUMA = as.factor(PUMA)) %>%
summarise(
sample_size = sum(hhsize),
food_insecurity_metric = weighted.mean(mean_of_z_scores, weight),
) %>% as.data.frame() %>% arrange(desc(food_insecurity_metric))
sf_data <- st_read("./data/tl_2023_19_puma20/tl_2023_19_puma20.shp")
colnames(sf_data)[colnames(sf_data) == "GEOID20"] = "PUMA"
map_data <- sf_data %>%
left_join(summary_by_PUMA, by = "PUMA")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = food_insecurity_metric)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households with Seniors on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
ggsave("figures/propotion_of_seniors_predicted.png", width=6, height=5)
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = food_insecurity_metric)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households with Seniors on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
ggplot(data=merged_standard) + geom_histogram(aes(x=sum_of_z_scores))
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = food_insecurity_metric)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households with Seniors on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
#Proportion of seniors that are on SNAP/Food Stamps
ggplot(data = map_data) +
geom_sf(aes(fill = food_insecurity_metric)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Proportion of Households with Seniors on SNAP/Food Stamps",
fill = "Proportion on\nFood Stamps/SNAP")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
?haven
?st_read
library(sp)
library(sf)
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_on_fsstmp)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Number of Seniors on SNAP by PUMA",
fill = "Predicted number\nof Seniors\non SNAP")
source("C:/Users/mattc/Desktop/FA24/STAT172Final/code/combining_predictions.R")
ggplot(data = senior_data) +
geom_sf(aes(fill = seniors_on_fsstmp)) +
scale_fill_viridis_c(option = "plasma") +  # Adjust color palette as needed
theme_minimal() +
labs(title = "Predicted Number of Seniors on SNAP by PUMA",
fill = "Predicted number\nof Seniors\non SNAP")
>>>>>>> 110702f78929994e961acd4eab161c16322ad52c
